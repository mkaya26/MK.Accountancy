@inherits DevBaseEditor
@typeparam TItem where TItem : Enum

<DxGridLayoutItem Column="ColumnIndex"
                  ColumnSpan="ColumnSpan"
                  CssClass="@LayoutItemCssClass"
                  Row="RowIndex"
                  RowSpan="RowSpan"
                  Visible="Visible">
    <Template>
        <DxComboBox @ref="_dxComboBox"
                    @bind-Value="@Value"
                    CssClass="@EditorCssClass"
                    Data="DataSource"
                    Enabled="Enabled"
                    InputCssClass="@InputCssClass"
                    ReadOnly="@ReadOnly"
                    TextFieldName="@TextFieldName"
                    ValueFieldName="@ValueFieldName"
                    SelectedItemChanged="SelectedItemChanged">
        </DxComboBox>
    </Template>
</DxGridLayoutItem>

<DevLabel Caption="@Caption"
          ColumnIndex="ColumnIndex - 2"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && CaptionVisible">
</DevLabel>

<DevLabel Caption="@SeperateCaption"
          ColumnIndex="ColumnIndex - 1"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && SeperateCaptionVisible">
</DevLabel>

@code {
    private DxComboBox<ComboboxEnumItem<TItem>, TItem> _dxComboBox;
    private string _value;

    [Parameter] public IEnumerable<ComboboxEnumItem<TItem>> DataSource { get; set; }
    [Parameter] public string TextFieldName { get; set; }
    [Parameter] public string ValueFieldName { get; set; }
    [Parameter] public Action<ComboboxEnumItem<TItem>> SelectedItemChanged { get; set; }
    [Parameter] public TItem Value { get; set; }

    [Parameter] public EventCallback<TItem> ValueChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsFocus && Visible && firstRender)
        {
            await _dxComboBox.FocusAsync();
        }
    }
}
