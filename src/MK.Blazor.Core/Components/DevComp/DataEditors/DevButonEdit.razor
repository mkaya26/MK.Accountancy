@inherits DevBaseEditor;

<DxGridLayoutItem Column="ColumnIndex"
                  ColumnSpan="ColumnSpan"
                  CssClass="@LayoutItemCssClass"
                  Row="RowIndex"
                  RowSpan="RowSpan"
                  Visible="Visible">
    <Template>
        <div class="dxbs-input-group input-group input-group-sm">
            <DxTextBox @ref="_dxTextBox"
                       @bind-Text="@Value"
                       @onkeydown="@KeyDownAsync"
                       @ondblclick="@ClickAsync"
                       CssClass="@EditorCssClass"
                       Enabled="Enabled"
                       InputCssClass="@InputCssClass"
                       NullText="@NullText"
                       ReadOnly="@ReadOnly">
            </DxTextBox>
            <div class="form-control form-control-sm dxbs-btn-group dxbs-input-group-append dxbs-focus-hidden">
                <button class="btn btn-sm dx-btn btn-secondary" 
                        tabindex="-1" 
                        @onclick="@ClickAsync"
                        @attributes="Attributes">
                        <svg class="button-edit" role="img"/>
                </button>
            </div>
        </div>
    </Template>
</DxGridLayoutItem>

<DevLabel Caption="@Caption"
          ColumnIndex="ColumnIndex - 2"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && CaptionVisible">
</DevLabel>

<DevLabel Caption="@SeperateCaption"
          ColumnIndex="ColumnIndex - 1"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && SeperateCaptionVisible">
</DevLabel>

@code {
    private DxTextBox _dxTextBox;
    private string _value;
    private Dictionary<string, object> Attributes;

    [Parameter] public ICoreCommonService Service { get; set; }
    [Parameter] public EventCallback<string> ButtonClickInvokeFunction { get; set; }
    [Parameter] public EventCallback<string> DeleteButtonKeydownInvokeFunction { get; set; }

    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            if (_value == value)
                return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    private async Task ClickAsync()
    {
        if(Enabled)
        {
            Service.ActiveEditComponent = _dxTextBox;
            await ButtonClickInvokeFunction.InvokeAsync();
        }
    }

    private async Task KeyDownAsync(KeyboardEventArgs args)
    {
        switch(args.Key)
        {
            case "F2" : await ClickAsync();break;
            case "Delete" : await DeleteAsync();break;
        }
    }

    private async Task DeleteAsync()
    {
        if (!DeleteButtonKeydownInvokeFunction.HasDelegate) return;
        Value = null;
        await DeleteButtonKeydownInvokeFunction.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsFocus && Visible && firstRender)
        {
            await _dxTextBox.FocusAsync();
        }
    }

    protected override void OnParametersSet()
    {
        if(!Enabled)
        {
            Attributes = new Dictionary<string, object>();
            Attributes.Add("disabled", "disabled");
        }
        else
        {
            Attributes?.Remove("disabled");
        }
    }
}
